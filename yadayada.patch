diff --git a/src/main/scala/it/pagopa/interop/authorizationserver/service/AuthorizationManagementService.scala b/src/main/scala/it/pagopa/interop/authorizationserver/service/AuthorizationManagementService.scala
index 9a73c8b..1ccbdcf 100644
--- a/src/main/scala/it/pagopa/interop/authorizationserver/service/AuthorizationManagementService.scala
+++ b/src/main/scala/it/pagopa/interop/authorizationserver/service/AuthorizationManagementService.scala
@@ -7,7 +7,7 @@ import scala.concurrent.Future
 
 trait AuthorizationManagementService {
 
-  def getKey(clientId: UUID, kid: String)(contexts: Seq[(String, String)]): Future[ClientKey]
-  def getClient(clientId: UUID)(contexts: Seq[(String, String)]): Future[Client]
+  def getKey(clientId: UUID, kid: String)(implicit contexts: Seq[(String, String)]): Future[ClientKey]
+  def getClient(clientId: UUID)(implicit contexts: Seq[(String, String)]): Future[Client]
 
 }
diff --git a/src/main/scala/it/pagopa/interop/authorizationserver/service/impl/AuthorizationManagementServiceImpl.scala b/src/main/scala/it/pagopa/interop/authorizationserver/service/impl/AuthorizationManagementServiceImpl.scala
index d52a3b3..dd0ff45 100644
--- a/src/main/scala/it/pagopa/interop/authorizationserver/service/impl/AuthorizationManagementServiceImpl.scala
+++ b/src/main/scala/it/pagopa/interop/authorizationserver/service/impl/AuthorizationManagementServiceImpl.scala
@@ -7,7 +7,8 @@ import it.pagopa.interop.authorizationmanagement.client.model._
 import it.pagopa.interop.commons.utils.errors.GenericComponentErrors
 import it.pagopa.interop.commons.utils.extractHeaders
 import it.pagopa.interop.commons.utils.TypeConversions._
-import org.slf4j.{Logger, LoggerFactory}
+import com.typesafe.scalalogging.{Logger, LoggerTakingImplicit}
+import it.pagopa.interop.commons.logging.{CanLogContextFields, ContextFieldsToLog}
 
 import java.util.UUID
 import scala.concurrent.{ExecutionContext, Future}
@@ -16,9 +17,10 @@ class AuthorizationManagementServiceImpl(invoker: AuthorizationManagementInvoker
   implicit ec: ExecutionContext
 ) extends AuthorizationManagementService {
 
-  implicit val logger: Logger = LoggerFactory.getLogger(this.getClass)
+  implicit val logger: LoggerTakingImplicit[ContextFieldsToLog] =
+    Logger.takingImplicit[ContextFieldsToLog](this.getClass)
 
-  override def getKey(clientId: UUID, kid: String)(contexts: Seq[(String, String)]): Future[ClientKey] =
+  override def getKey(clientId: UUID, kid: String)(implicit contexts: Seq[(String, String)]): Future[ClientKey] =
     for {
       (bearerToken, correlationId, ip) <- extractHeaders(contexts).toFuture
       request = keyApi.getClientKeyById(xCorrelationId = correlationId, clientId, kid, xForwardedFor = ip)(
@@ -27,7 +29,7 @@ class AuthorizationManagementServiceImpl(invoker: AuthorizationManagementInvoker
       result <- invoker.invoke(request, "Key Retrieve", handleCommonErrors(s"clientKey $kid for client $clientId"))
     } yield result
 
-  override def getClient(clientId: UUID)(contexts: Seq[(String, String)]): Future[Client] =
+  override def getClient(clientId: UUID)(implicit contexts: Seq[(String, String)]): Future[Client] =
     for {
       (bearerToken, correlationId, ip) <- extractHeaders(contexts).toFuture
       request = clientApi.getClient(xCorrelationId = correlationId, clientId, xForwardedFor = ip)(
@@ -38,14 +40,15 @@ class AuthorizationManagementServiceImpl(invoker: AuthorizationManagementInvoker
 
   private[service] def handleCommonErrors[T](
     resource: String
-  ): (Logger, String) => PartialFunction[Throwable, Future[T]] = { (logger, msg) =>
-    {
-      case ex @ ApiError(code, message, _, _, _) if code == 404 =>
-        logger.error(s"$msg. code > $code - message > $message - ${ex.getMessage}")
-        Future.failed(GenericComponentErrors.ResourceNotFoundError(resource))
-      case ex                                                   =>
-        logger.error(s"$msg. Error: ${ex.getMessage}")
-        Future.failed(ex)
-    }
+  ): (ContextFieldsToLog, LoggerTakingImplicit[ContextFieldsToLog], String) => PartialFunction[Throwable, Future[T]] = {
+    (context, logger, msg) =>
+      {
+        case ex @ ApiError(code, message, _, _, _) if code == 404 =>
+          logger.error(s"$msg. code > $code - message > $message - ${ex.getMessage}")(context)
+          Future.failed(GenericComponentErrors.ResourceNotFoundError(resource))
+        case ex                                                   =>
+          logger.error(s"$msg. Error: ${ex.getMessage}")(context)
+          Future.failed(ex)
+      }
   }
 }
